/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MyprofileRouteImport } from './routes/myprofile'
import { Route as MyappointmentRouteImport } from './routes/myappointment'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AppointmentRouteImport } from './routes/appointment'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DoctorsIndexRouteImport } from './routes/doctors/index'
import { Route as DoctorsSpecialityRouteImport } from './routes/doctors/$speciality'
import { Route as AppointmentDocIdRouteImport } from './routes/appointment/$docId'

const MyprofileRoute = MyprofileRouteImport.update({
  id: '/myprofile',
  path: '/myprofile',
  getParentRoute: () => rootRouteImport,
} as any)
const MyappointmentRoute = MyappointmentRouteImport.update({
  id: '/myappointment',
  path: '/myappointment',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentRoute = AppointmentRouteImport.update({
  id: '/appointment',
  path: '/appointment',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DoctorsIndexRoute = DoctorsIndexRouteImport.update({
  id: '/doctors/',
  path: '/doctors/',
  getParentRoute: () => rootRouteImport,
} as any)
const DoctorsSpecialityRoute = DoctorsSpecialityRouteImport.update({
  id: '/doctors/$speciality',
  path: '/doctors/$speciality',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentDocIdRoute = AppointmentDocIdRouteImport.update({
  id: '/$docId',
  path: '/$docId',
  getParentRoute: () => AppointmentRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/appointment': typeof AppointmentRouteWithChildren
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/myappointment': typeof MyappointmentRoute
  '/myprofile': typeof MyprofileRoute
  '/appointment/$docId': typeof AppointmentDocIdRoute
  '/doctors/$speciality': typeof DoctorsSpecialityRoute
  '/doctors': typeof DoctorsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/appointment': typeof AppointmentRouteWithChildren
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/myappointment': typeof MyappointmentRoute
  '/myprofile': typeof MyprofileRoute
  '/appointment/$docId': typeof AppointmentDocIdRoute
  '/doctors/$speciality': typeof DoctorsSpecialityRoute
  '/doctors': typeof DoctorsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/appointment': typeof AppointmentRouteWithChildren
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/myappointment': typeof MyappointmentRoute
  '/myprofile': typeof MyprofileRoute
  '/appointment/$docId': typeof AppointmentDocIdRoute
  '/doctors/$speciality': typeof DoctorsSpecialityRoute
  '/doctors/': typeof DoctorsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/appointment'
    | '/contact'
    | '/login'
    | '/myappointment'
    | '/myprofile'
    | '/appointment/$docId'
    | '/doctors/$speciality'
    | '/doctors'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/appointment'
    | '/contact'
    | '/login'
    | '/myappointment'
    | '/myprofile'
    | '/appointment/$docId'
    | '/doctors/$speciality'
    | '/doctors'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/appointment'
    | '/contact'
    | '/login'
    | '/myappointment'
    | '/myprofile'
    | '/appointment/$docId'
    | '/doctors/$speciality'
    | '/doctors/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AppointmentRoute: typeof AppointmentRouteWithChildren
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
  MyappointmentRoute: typeof MyappointmentRoute
  MyprofileRoute: typeof MyprofileRoute
  DoctorsSpecialityRoute: typeof DoctorsSpecialityRoute
  DoctorsIndexRoute: typeof DoctorsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/myprofile': {
      id: '/myprofile'
      path: '/myprofile'
      fullPath: '/myprofile'
      preLoaderRoute: typeof MyprofileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/myappointment': {
      id: '/myappointment'
      path: '/myappointment'
      fullPath: '/myappointment'
      preLoaderRoute: typeof MyappointmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointment': {
      id: '/appointment'
      path: '/appointment'
      fullPath: '/appointment'
      preLoaderRoute: typeof AppointmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doctors/': {
      id: '/doctors/'
      path: '/doctors'
      fullPath: '/doctors'
      preLoaderRoute: typeof DoctorsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doctors/$speciality': {
      id: '/doctors/$speciality'
      path: '/doctors/$speciality'
      fullPath: '/doctors/$speciality'
      preLoaderRoute: typeof DoctorsSpecialityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointment/$docId': {
      id: '/appointment/$docId'
      path: '/$docId'
      fullPath: '/appointment/$docId'
      preLoaderRoute: typeof AppointmentDocIdRouteImport
      parentRoute: typeof AppointmentRoute
    }
  }
}

interface AppointmentRouteChildren {
  AppointmentDocIdRoute: typeof AppointmentDocIdRoute
}

const AppointmentRouteChildren: AppointmentRouteChildren = {
  AppointmentDocIdRoute: AppointmentDocIdRoute,
}

const AppointmentRouteWithChildren = AppointmentRoute._addFileChildren(
  AppointmentRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AppointmentRoute: AppointmentRouteWithChildren,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
  MyappointmentRoute: MyappointmentRoute,
  MyprofileRoute: MyprofileRoute,
  DoctorsSpecialityRoute: DoctorsSpecialityRoute,
  DoctorsIndexRoute: DoctorsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
